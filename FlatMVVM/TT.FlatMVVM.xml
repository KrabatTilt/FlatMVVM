<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TT.FlatMVVM</name>
    </assembly>
    <members>
        <member name="T:TT.FlatMVVM.ControlVM.MenuItemVM">
            <summary>
            FlatViewModel for ContextMenu entries
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.ControlVM.MenuItemVM.Header">
            <summary>
            Get/Set item header.
            </summary>
        </member>
        <member name="T:TT.FlatMVVM.ControlVM.TabControlVM">
            <summary>
            FlatVM for TabControl entries.
            </summary>
        </member>
        <member name="T:TT.FlatMVVM.Converter.AConverterBase">
            <summary>
            Base class used to implement ValueConverters for use as markup extension.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Converter.AConverterBase.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>The object value to set on the property where the extension is applied. </returns>
        </member>
        <member name="T:TT.FlatMVVM.Converter.BooleanToVisibilityConverter">
            <summary>
            BooleanToVisibilityConverter
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Converter.BooleanToVisibilityConverter.InvisibleTarget">
            <summary>
            Choose between Collapsed or Hidden when value is false. (Default is Visibility.Collapsed)
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Converter.BooleanToVisibilityConverter.Inverse">
            <summary>
            Invert the converters behavior.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Converter.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert bool to visibility.
            </summary>
            <param name="value">Source value of type bool.</param>
            <param name="targetType">Target value of type Visibility.</param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:TT.FlatMVVM.Converter.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convaert Visibility to bool
            </summary>
            <param name="value">Source value of type Visibility.</param>
            <param name="targetType">Target value of type bool.</param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:TT.FlatMVVM.Converter.EnumSourceConverter">
            <summary>
            BooleanToVisibilityConverter
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Converter.EnumSourceConverter.UseDescription">
            <summary>
            Get/Set whether to display enum value description attribute or not.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Converter.EnumSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
        </member>
        <member name="M:TT.FlatMVVM.Converter.EnumSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns <see langword="null" />, the valid null value is used.</returns>
        </member>
        <member name="T:TT.FlatMVVM.Converter.EnumDescriptionTypeConverter">
            <summary>
            An enum converter which converts enum values to its corresponding value description attribute
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Converter.EnumDescriptionTypeConverter.#ctor(System.Type)">
            <summary>
            Create a new instance of EnumDescriptionTypeConverter.
            </summary>
            <param name="type">Enum to convert</param>
        </member>
        <member name="M:TT.FlatMVVM.Converter.EnumDescriptionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:TT.FlatMVVM.Converter.InverseBooleanConverter">
            <summary>
            InverseBooleanConverter
            </summary>
        </member>
        <member name="T:TT.FlatMVVM.DelegateCommand">
            <summary>
            Basic RelayCommand
            </summary>
        </member>
        <member name="E:TT.FlatMVVM.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:TT.FlatMVVM.DelegateCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:TT.FlatMVVM.DelegateCommand"/>.
            </summary>
            <param name="execute">Action to execute.</param>
            <param name="canExecute">Predicate to check before execution.</param>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the conditions that determine whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:TT.FlatMVVM.DelegateCommand`2">
            <summary>
            RelayCommand with generic 'Execute' and 'CanExecute' command parameter types.
            </summary>
            <typeparam name="TExParam">Type of execute command parameter.</typeparam>
            <typeparam name="TCExParam">Type of can execute command parameter.</typeparam>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand`2.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TT.FlatMVVM.DelegateCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand`2.#ctor(System.Action{`0},System.Predicate{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:TT.FlatMVVM.DelegateCommand"/>.
            </summary>
            <param name="execute">Action to execute.</param>
            <param name="canExecute">Predicate to check before execution.</param>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand`2.CanExecute(System.Object)">
            <summary>
            Defines the conditions that determine whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="E:TT.FlatMVVM.DelegateCommand`2.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.DelegateCommand`2.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:TT.FlatMVVM.FlatVM">
            <summary>
            ViewModel base class.
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.FlatVM.HasErrors">
            <summary>
            Gets a value that indicates whether the entity has validation errors.
            </summary>
            <returns>true if the entity currently has validation errors; otherwise, false.</returns>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of changed property.</param>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.OnPropertyChanged(System.Func{System.Collections.Generic.ICollection{System.String}},System.String)">
            <summary>
            Call to raise PropertyChanged event and validate property.
            </summary>
            <param name="propertyValidation">Delegate for property validation.</param>
            <param name="propertyName">Name of changed property.</param>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Call to raise PropertyChanged event.
            </summary>
            <param name="sender">Name of changed property.</param>
            <param name="propertyChangedEventArgs"></param>
        </member>
        <member name="E:TT.FlatMVVM.FlatVM.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.OnErrorsChanged(System.String)">
            <summary>
            Call to raise ErrorsChanged event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:TT.FlatMVVM.FlatVM.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire entity.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <returns>The validation errors for the property or entity.</returns>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or <see cref="F:System.String.Empty" />, to retrieve entity-level errors.</param>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.RefreshAllBindings">
            <summary>
            Refresh all bindings connected to this ViewModel.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.FlatVM.ValidatePropertyAsync(System.String,System.Func{System.Collections.Generic.ICollection{System.String}})">
            <summary>
            Validates a property asynchronously on background thread pool.
            </summary>
            <param name="propertyName">Name of property to validate.</param>
            <param name="propertyValidation">Property validation function.</param>
        </member>
        <member name="T:TT.FlatMVVM.Utils.BindingProxy">
            <summary>
            BindingProxy
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Utils.BindingProxy.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:TT.FlatMVVM.Utils.TriggerActionCommand">
            <summary>
            TriggerAction which links events to commands.
            </summary>
        </member>
        <member name="F:TT.FlatMVVM.Utils.TriggerActionCommand.CommandProperty">
            <summary>
            Command DP
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Utils.TriggerActionCommand.Command">
            <summary>
            Command that should be called when event is triggered.
            </summary>
        </member>
        <member name="F:TT.FlatMVVM.Utils.TriggerActionCommand.CommandParameterProperty">
            <summary>
            CommandParameter DP
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Utils.TriggerActionCommand.CommandParameter">
            <summary>
            CommandParameter which should be passed with the Command.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Utils.TriggerActionCommand.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="T:TT.FlatMVVM.Utils.UI">
            <summary>
            Wraps some UI and application functionality.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.RunAsync(System.Action)">
            <summary>
            Run action asynchronously on UI thread.
            </summary>
            <param name="action">Action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.RunAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Run action asynchronously on UI thread with specified priority.
            </summary>
            <param name="action">Action to execute.</param>
            <param name="priority">Execution priority.</param>
            <returns></returns>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.RunSync(System.Action)">
            <summary>
            Run action synchronously on UI thread.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.RunSync(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Run action synchronously on UI thread with specified priority.
            </summary>
            <param name="action">Action to execute.</param>
            <param name="priority">Execution priority.</param>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.RefreshCommandsAsync">
            <summary>
            Reevaluates all commands asynchronously.
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Utils.UI.MainWindow">
            <summary>
            Current Application MainWindow.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.EnableMainWindow(System.Nullable{System.Windows.Threading.DispatcherPriority})">
            <summary>
            Enable current application MainWindow.
            </summary>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.DisableMainWindow(System.Nullable{System.Windows.Threading.DispatcherPriority})">
            <summary>
            Disable current application MainWindow.
            </summary>
        </member>
        <member name="P:TT.FlatMVVM.Utils.UI.IsInDesignMode">
            <summary>
            Check whether code is executed in design mode or not.
            </summary>
            <remarks>
            This method is evaluated only once on application startup.
            </remarks>
            <returns>True if in design mode; else false.</returns>
        </member>
        <member name="M:TT.FlatMVVM.Utils.UI.SetMouseCursorAsync(System.Windows.Input.Cursor)">
            <summary>
            Set desired mouse cursor.
            </summary>
            <param name="cursor">New mouse cursor.</param>
        </member>
    </members>
</doc>
